name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        # Install Debian build dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential debhelper dh-python python3-all python3-setuptools python3-dev \
          dpkg-dev devscripts fakeroot lintian
        
        # Install Python dependencies with updated setuptools
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=66.0.0 wheel
        pip install build twine

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(cat VERSION)
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: new_version
      run: |
        if [ -n "${{ inputs.custom_version }}" ]; then
          NEW_VERSION="${{ inputs.custom_version }}"
          echo "Using custom version: $NEW_VERSION"
        else
          chmod +x ./version.sh
          # Run version.sh in dry-run mode to get new version
          case "${{ inputs.version_type }}" in
            "major")
              NEW_VERSION=$(./version.sh major | grep "→" | cut -d'→' -f2 | xargs || echo "")
              ;;
            "minor")
              NEW_VERSION=$(./version.sh minor | grep "→" | cut -d'→' -f2 | xargs || echo "")
              ;;
            "patch")
              NEW_VERSION=$(./version.sh patch | grep "→" | cut -d'→' -f2 | xargs || echo "")
              ;;
          esac
          
          # If the above doesn't work, calculate manually
          if [ -z "$NEW_VERSION" ]; then
            CURRENT_VERSION=$(cat VERSION)
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "${{ inputs.version_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
        fi
        
        # Check if tag already exists and increment patch if needed
        if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag v$NEW_VERSION already exists. Incrementing patch version..."
          IFS='.' read -ra VERSION_PARTS <<< "$NEW_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Using new version: $NEW_VERSION"
        fi

        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"

    - name: Update version files
      run: |
        chmod +x ./version.sh
        if [ -n "${{ inputs.custom_version }}" ]; then
          ./version.sh set "${{ steps.new_version.outputs.version }}"
        else
          ./version.sh "${{ inputs.version_type }}"
        fi

    - name: Update CHANGELOG.md
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        CURRENT_DATE=$(date +%Y-%m-%d)
        
        # Backup the original changelog
        cp CHANGELOG.md CHANGELOG.md.bak
        
        # Create the new changelog header
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "All notable changes to OpenVPN Manager will be documented in this file." >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
        echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## [Unreleased]" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Planned" >> CHANGELOG.md
        echo "- Enhanced connection statistics and monitoring" >> CHANGELOG.md
        echo "- Multiple VPN provider support" >> CHANGELOG.md
        echo "- Configuration backup and restore" >> CHANGELOG.md
        echo "- Advanced logging and diagnostics" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## [$NEW_VERSION] - $CURRENT_DATE" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Added" >> CHANGELOG.md
        echo "- Automated release via GitHub Actions" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Changed" >> CHANGELOG.md
        echo "- Version bumped to $NEW_VERSION" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Fixed" >> CHANGELOG.md
        echo "- Minor bug fixes and improvements" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Append the rest of the original changelog (skip the header)
        tail -n +18 CHANGELOG.md.bak >> CHANGELOG.md
        rm CHANGELOG.md.bak

    - name: Build self-contained .deb package
      run: |
        echo "🔨 Building self-contained .deb package..."
        chmod +x ./build.sh
        ./build.sh
        # Verifica se o .deb foi criado
        DEB_FILE=$(find .. -name "openvpn-manager_*.deb" -type f | head -1)
        if [ -n "$DEB_FILE" ]; then
          echo "✅ .deb package created: $DEB_FILE"
          ls -la "$DEB_FILE"
        else
          echo "❌ .deb package not found after build!"
          exit 1
        fi

    - name: Create source distribution
      run: |
        python -m build --sdist --wheel

    - name: Commit version changes
      run: |
        # Check if we're on a protected branch
        CURRENT_BRANCH=$(git branch --show-current)
        echo "Current branch: $CURRENT_BRANCH"
        
        # Only commit version-related files, not build artifacts
        git add VERSION config.py pyproject.toml setup.py CHANGELOG.md
        if [ -f "debian/changelog" ]; then
          git add debian/changelog
        fi
        # Explicitly exclude build artifacts
        git reset HEAD dist/ build/ *.egg-info/ debian/*.backup || true
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "No changes to commit, skipping commit step"
        else
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
          
          # Only try to push if we're not on main (which might be protected)
          if [ "$CURRENT_BRANCH" != "main" ]; then
            echo "Pushing to branch: $CURRENT_BRANCH"
            git push origin "$CURRENT_BRANCH"
          else
            echo "⚠️ Skipping push to protected main branch"
            echo "💡 Create a PR manually with these changes if needed"
          fi
        fi

    - name: Create Git tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        
        # Create and push tag regardless of previous push success
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        # Try to push tag, but don't fail if it doesn't work
        if git push origin "v$NEW_VERSION"; then
          echo "✅ Tag pushed successfully"
        else
          echo "⚠️ Failed to push tag, but continuing with release creation"
          echo "Tag will be created locally and release will still be made"
        fi

    - name: Extract changelog for release
      id: changelog
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        
        # Extract changelog for this version
        awk "/## \[$NEW_VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
        
        # If release notes are empty, create default ones
        if [ ! -s release_notes.md ]; then
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "* Version bumped to $NEW_VERSION" >> release_notes.md
          echo "* Build improvements and bug fixes" >> release_notes.md
          echo "* See [CHANGELOG.md](CHANGELOG.md) for full details" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.version }}...v$NEW_VERSION" >> release_notes.md
        fi
        
        # Store in output (handle multiline)
        echo 'notes<<EOF' >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    - name: Find build artifacts
      id: artifacts
      run: |
        # Find the .deb file in dist directory
        DEB_FILE=$(find dist/ -name "openvpn-manager_*.deb" -type f | head -1)
        if [ -n "$DEB_FILE" ]; then
          # Convert to relative path for GitHub Actions
          DEB_REL_PATH=$(realpath --relative-to=. "$DEB_FILE")
          echo "deb_file=$DEB_REL_PATH" >> $GITHUB_OUTPUT
          echo "Found .deb file: $DEB_REL_PATH"
          echo "Size: $(du -sh "$DEB_FILE" | cut -f1)"
        else
          echo "❌ No .deb file found!"
          echo "Available files in dist directory:"
          ls -la dist/
        fi
        
        # Find wheel files
        WHEEL_FILES=$(find dist/ -name "*.whl" -type f 2>/dev/null || echo "")
        TAR_FILES=$(find dist/ -name "*.tar.gz" -type f 2>/dev/null || echo "")
        
        echo "wheel_files=$WHEEL_FILES" >> $GITHUB_OUTPUT
        echo "tar_files=$TAR_FILES" >> $GITHUB_OUTPUT
        
        if [ -n "$WHEEL_FILES" ]; then
          echo "Found wheel files: $WHEEL_FILES"
        fi
        if [ -n "$TAR_FILES" ]; then
          echo "Found source files: $TAR_FILES"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.new_version.outputs.version }}
        name: OpenVPN Manager v${{ steps.new_version.outputs.version }}
        body: ${{ steps.changelog.outputs.notes }}
        prerelease: ${{ inputs.prerelease }}
        files: |
          ${{ steps.artifacts.outputs.deb_file }}
          dist/*.whl
          dist/*.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to PyPI (optional)
      if: false  # Disabled for now
      run: |
        # Uncomment and configure if you want to publish to PyPI
        # echo "To publish to PyPI, configure PYPI_API_TOKEN secret and uncomment:"
        # echo "twine upload dist/*"
        echo "PyPI upload skipped (not configured)"

    - name: Create deployment summary
      run: |
        echo "## 🚀 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: v${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version**: v${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Type**: ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-release**: ${{ inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Built" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ steps.artifacts.outputs.deb_file }}" ]; then
          echo "- ✅ Debian Package (.deb)" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ steps.artifacts.outputs.wheel_files }}" ]; then
          echo "- ✅ Python Wheel (.whl)" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -n "${{ steps.artifacts.outputs.tar_files }}" ]; then
          echo "- ✅ Source Distribution (.tar.gz)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the release page" >> $GITHUB_STEP_SUMMARY
        echo "2. Test the release artifacts" >> $GITHUB_STEP_SUMMARY
        echo "3. Update documentation if needed" >> $GITHUB_STEP_SUMMARY
        echo "4. Announce the release to users" >> $GITHUB_STEP_SUMMARY
