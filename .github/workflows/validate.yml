name: Validate Project

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/*'
      - 'bugfix/*'
      - 'hotfix/*'
      - 'release/*'
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install validation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Validate project structure
      run: |
        echo "Validating: Validating project structure..."
        
        # Check required files exist
        REQUIRED_FILES=(
          "VERSION"
          "config.py"
          "main.py"
          "setup.py"
          "pyproject.toml"
          "debian/changelog"
          "debian/control"
          "LICENSE"
          "README.md"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Required file missing: $file"
            exit 1
          fi
          echo "SUCCESS: Found: $file"
        done

    - name: Validate version consistency
      run: |
        echo "Validating: Checking version consistency..."
        
        VERSION_FILE=$(cat VERSION)
        echo "VERSION file: $VERSION_FILE"
        
        # Check config.py - execute Python to get actual version
        CONFIG_VERSION=$(python3 -c 'import sys; sys.path.insert(0, "."); from config import APP_VERSION; print(APP_VERSION)' 2>/dev/null || echo "error")
        echo "config.py: $CONFIG_VERSION"
        
        # Check setup.py - execute Python to get actual version  
        SETUP_VERSION=$(python3 -c 'with open("VERSION", "r") as f: print(f.read().strip())' 2>/dev/null || echo "error")
        echo "setup.py: $SETUP_VERSION"
        
        # Check debian/changelog
        DEBIAN_VERSION=$(awk '/^openvpn-manager \(/ {gsub(/[()]/, "", $2); split($2, v, "-"); print v[1]; exit}' debian/changelog)
        echo "debian/changelog: $DEBIAN_VERSION"
        
        # Validate all versions match
        if [ "$VERSION_FILE" != "$CONFIG_VERSION" ] || \
           [ "$VERSION_FILE" != "$SETUP_VERSION" ] || \
           [ "$VERSION_FILE" != "$DEBIAN_VERSION" ]; then
          echo "ERROR: Version mismatch detected!"
          echo "  VERSION: $VERSION_FILE"
          echo "  config.py: $CONFIG_VERSION"
          echo "  setup.py: $SETUP_VERSION"
          echo "  debian/changelog: $DEBIAN_VERSION"
          exit 1
        fi
        
        echo "SUCCESS: All versions consistent: $VERSION_FILE"
        echo "debian/changelog: $DEBIAN_VERSION"
        
        # Validate all versions match
        if [ "$VERSION_FILE" != "$CONFIG_VERSION" ] || \
           [ "$VERSION_FILE" != "$SETUP_VERSION" ] || \
           [ "$VERSION_FILE" != "$DEBIAN_VERSION" ]; then
          echo "ERROR: Version mismatch detected!"
          echo "  VERSION: $VERSION_FILE"
          echo "  config.py: $CONFIG_VERSION"
          echo "  setup.py: $SETUP_VERSION"
          echo "  debian/changelog: $DEBIAN_VERSION"
          exit 1
        fi
        
        echo "SUCCESS: All versions consistent: $VERSION_FILE"

    - name: Validate Python syntax
      run: |
        echo "Python: Validating Python syntax..."
        python -m py_compile main.py
        python -m py_compile config.py
        echo "SUCCESS: Python syntax valid"

    - name: Check code style
      run: |
        echo "Style: Checking code style..."
        flake8 main.py config.py --max-line-length=88 --ignore=E203,W503
        echo "SUCCESS: Code style check passed"

    - name: Validate Debian package metadata
      run: |
        echo "Package: Validating Debian package metadata..."
        
        # Check control file
        if ! grep -q "Package: openvpn-manager" debian/control; then
          echo "ERROR: Package name not found in debian/control"
          exit 1
        fi
        
        # Check changelog format
        if ! head -1 debian/changelog | grep -q "openvpn-manager (.*) unstable; urgency=medium"; then
          echo "ERROR: Invalid changelog format"
          exit 1
        fi
        
        # Check for future dates
        CURRENT_YEAR=$(date +%Y)
        FUTURE_DATES=$(grep -c "$((CURRENT_YEAR + 1))" debian/changelog || echo "0")
        if [ "$FUTURE_DATES" -gt 0 ]; then
          echo "ERROR: Found $FUTURE_DATES future date(s) in debian/changelog"
          exit 1
        fi
        
        echo "SUCCESS: Debian metadata valid"

    - name: Validate dependencies
      run: |
        echo "Dependencies: Validating dependencies..."
        
        # Check if setup.py dependencies are reasonable
        if ! grep -q 'install_requires=\[\]' setup.py; then
          echo "WARNING: setup.py has external dependencies (expected for bundled .deb)"
        fi
        
        # Validate requirements are documented
        if [ -f "requirements.txt" ]; then
          echo "SUCCESS: Found requirements.txt"
        else
          echo "INFO: No requirements.txt (using bundled approach)"
        fi

  test-build:
    runs-on: ubuntu-latest
    needs: validate-structure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential debhelper dh-python python3-all \
          python3-setuptools python3-dev dpkg-dev devscripts fakeroot
        
        python -m pip install --upgrade pip
        pip install --upgrade setuptools>=66.0.0 wheel build

    - name: Test build process
      run: |
        echo "Building: Testing build process..."
        
        # Make scripts executable
        chmod +x ./build.sh ./version.sh
        
        # Clean any previous builds
        rm -rf dist/ build/ *.egg-info/
        
        # Test that build script runs without errors
        if timeout 300 ./build.sh; then
          echo "SUCCESS: Build process completed successfully"
        else
          echo "ERROR: Build process failed or timed out"
          exit 1
        fi
        
        # Validate output
        if [ -f "dist/openvpn-manager_"*".deb" ]; then
          echo "SUCCESS: .deb package created"
          DEB_FILE=$(find dist/ -name "*.deb" | head -1)
          echo "Package: Package size: $(du -sh "$DEB_FILE" | cut -f1)"
          
          # Basic validation
          if dpkg-deb --info "$DEB_FILE" >/dev/null 2>&1; then
            echo "SUCCESS: .deb structure is valid"
          else
            echo "ERROR: .deb file is corrupted"
            exit 1
          fi
        else
          echo "ERROR: No .deb package found"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: test-build-artifacts
        path: dist/
        retention-days: 1