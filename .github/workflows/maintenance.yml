name: Maintenance Tasks

on:
  schedule:
    # Run weekly on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_artifacts:
        description: 'Clean up old artifacts'
        required: false
        default: true
        type: boolean
      fix_dates:
        description: 'Fix any future dates in changelog'
        required: false
        default: true
        type: boolean
      update_dependencies:
        description: 'Check for dependency updates'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: write

jobs:
  cleanup-and-maintenance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action [Maintenance]"

    - name: Fix future dates in changelog
      if: inputs.fix_dates || github.event_name == 'schedule'
      run: |
        echo "🔧 Checking for future dates in changelog..."
        
        CURRENT_YEAR=$(date +%Y)
        FUTURE_YEAR=$((CURRENT_YEAR + 1))
        
        if [ -f "debian/changelog" ]; then
          # Check for future dates
          FUTURE_COUNT=$(grep -c "$FUTURE_YEAR" debian/changelog || echo "0")
          
          if [ "$FUTURE_COUNT" -gt 0 ]; then
            echo "⚠️  Found $FUTURE_COUNT future date(s) in debian/changelog"
            
            # Fix future dates
            sed -i "s/$FUTURE_YEAR/$CURRENT_YEAR/g" debian/changelog
            
            echo "✅ Fixed future dates in debian/changelog"
            
            # Commit the fix
            git add debian/changelog
            if ! git diff --cached --quiet; then
              git commit -m "fix: correct future dates in debian/changelog" \
                         -m "Changed $FUTURE_YEAR to $CURRENT_YEAR" \
                         -m "Automated fix by maintenance workflow"
              
              git push origin main
              echo "📝 Changes committed and pushed"
            fi
          else
            echo "✅ No future dates found in changelog"
          fi
        fi

    - name: Validate project consistency
      run: |
        echo "🔍 Running consistency checks..."
        
        # Check version consistency
        VERSION_FILE=$(cat VERSION 2>/dev/null || echo "")
        
        if [ -n "$VERSION_FILE" ]; then
          echo "Current version: $VERSION_FILE"
          
          # Check all version files
          FILES_TO_CHECK=("config.py" "setup.py" "debian/changelog")
          INCONSISTENT=false
          
          for file in "${FILES_TO_CHECK[@]}"; do
            if [ -f "$file" ]; then
              case "$file" in
                "config.py")
                  FILE_VERSION=$(grep 'APP_VERSION = ' "$file" | cut -d'"' -f2 2>/dev/null || echo "")
                  ;;
                "setup.py")
                  FILE_VERSION=$(grep 'VERSION = ' "$file" | cut -d'"' -f2 2>/dev/null || echo "")
                  ;;
                "debian/changelog")
                  FILE_VERSION=$(awk '/^openvpn-manager \(/ {gsub(/[()]/, "", $2); split($2, v, "-"); print v[1]; exit}' "$file" 2>/dev/null || echo "")
                  ;;
              esac
              
              if [ "$VERSION_FILE" != "$FILE_VERSION" ]; then
                echo "❌ Version mismatch in $file: expected $VERSION_FILE, found $FILE_VERSION"
                INCONSISTENT=true
              else
                echo "✅ $file version matches: $FILE_VERSION"
              fi
            fi
          done
          
          if [ "$INCONSISTENT" = true ]; then
            echo "⚠️  Version inconsistencies detected. Consider running version.sh to fix."
            
            # Create an issue or notification (optional)
            echo "🔧 To fix, run: ./version.sh set $VERSION_FILE"
          else
            echo "✅ All versions are consistent"
          fi
        fi

    - name: Check dependency status
      if: inputs.update_dependencies
      run: |
        echo "📦 Checking dependency status..."
        
        # Check if pip-audit is available for security check
        if command -v pip &> /dev/null; then
          python -m pip install --quiet pip-audit 2>/dev/null || echo "pip-audit not available"
          
          # Create a temporary requirements file from setup.py
          if [ -f "setup.py" ] && grep -q "install_requires" setup.py; then
            echo "Checking setup.py dependencies..."
            # This is a simplified check - in a real scenario you'd parse setup.py properly
            echo "ℹ️  Manual dependency review recommended"
          fi
        fi
        
        # Check for known security issues in the ecosystem
        echo "ℹ️  Consider running 'pip-audit' locally for security checks"

    - name: Clean old build artifacts
      if: inputs.cleanup_artifacts || github.event_name == 'schedule'
      run: |
        echo "🧹 Cleaning old build artifacts..."
        
        # Clean local build artifacts
        rm -rf build/ dist/ *.egg-info/ .pybuild/
        rm -f ../openvpn-manager_*.deb ../openvpn-manager_*.buildinfo ../openvpn-manager_*.changes
        
        # Clean debian build artifacts
        if [ -d "debian" ]; then
          find debian/ -name "*.backup" -delete
          find debian/ -name "*.debhelper.log" -delete
          find debian/ -name "debhelper-build-stamp" -delete
          rm -f debian/files debian/*.substvars
        fi
        
        echo "✅ Local artifacts cleaned"

    - name: Generate maintenance report
      run: |
        echo "📊 Generating maintenance report..."
        
        CURRENT_VERSION=$(cat VERSION 2>/dev/null || echo "unknown")
        CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        {
          echo "# 🔧 Maintenance Report"
          echo ""
          echo "**Generated:** $CURRENT_DATE"
          echo "**Current Version:** $CURRENT_VERSION"
          echo ""
          echo "## Actions Performed"
          echo ""
          if [ "${{ inputs.fix_dates }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "- ✅ Checked and fixed future dates in changelog"
          fi
          if [ "${{ inputs.cleanup_artifacts }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "- ✅ Cleaned old build artifacts"
          fi
          if [ "${{ inputs.update_dependencies }}" = "true" ]; then
            echo "- ✅ Checked dependency status"
          fi
          echo "- ✅ Validated project consistency"
          echo ""
          echo "## System Status"
          echo ""
          echo "- **Repository:** ${{ github.repository }}"
          echo "- **Branch:** ${{ github.ref_name }}"
          echo "- **Workflow:** ${{ github.workflow }}"
          echo "- **Run ID:** ${{ github.run_id }}"
          echo ""
          echo "## Next Steps"
          echo ""
          echo "- Review any warnings or errors above"
          echo "- Consider running a test build if changes were made"
          echo "- Update dependencies if security issues are found"
          
        } >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Maintenance report generated"

  # Separate job for cleaning GitHub Actions artifacts
  cleanup-actions-artifacts:
    runs-on: ubuntu-latest
    if: inputs.cleanup_artifacts || github.event_name == 'schedule'
    
    steps:
    - name: Delete old workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 10